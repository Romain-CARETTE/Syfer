BITS 64

section .text
	global _start
	global main

%define SYS_MPROTECT	10
%define PAGE_SIZE	0X1000
%define SYS_WRITE 0x01
%define SYS_RT_SIGACTION 0x0d
%define SYS_RT_SIGRETURN 0x0f
%define SYS_MPROTECT	10
%define SIGTERM 0x0f
%define SIGINT 0x02
%define SIGTRAP	0x05 
%define STDOUT 0x01
%define SA_RESTORER 0x04000000

BEGIN:
	LEA r15, [ REL handler ]
	LEA r14, [ REL restorer ]
	JMP _start
handler:
	MOV RDI, RSP
	ADD RDI, 0XB0
	MOV RDI, [RDI]
	PUSH RDI
	MOV R10, 0X07
	CALL CHANGE_PERMISSION_OF_ADDRESS
	POP RDI
	
	MOV RDI, RSP
	ADD RDI, 0XB0
	MOV RDI, [RDI]
	SUB RDI, 1
	MOV BYTE [RDI], 0X55
	

	MOV [RSP + 0XB0 ], RDI


	JMP END

END:	
	CALL _debug_01
	RET
	


CHANGE_PERMISSION_OF_ADDRESS:
	PUSH RBP
	MOV RBP, RSP
	SUB RSP, 0X10

	MOV RAX, RDI
	MOV QWORD [RBP-0X10], RAX
	MOV EDX, PAGE_SIZE
	MOVSXD RCX, EDX
	XOR RDX, RDX
	DIV RCX
	MOV RAX, RDX
	NEG RAX
	ADD QWORD [RBP-0x10], RAX
	MOV RDI, QWORD [RBP-0x10]
	
	
	MOV RSI, PAGE_SIZE
	MOV RDX, R10
	MOV RAX, SYS_MPROTECT
	SYSCALL
	LEAVE
	RET


restorer:
	MOV RAX, SYS_RT_SIGRETURN
	SYSCALL

_debug_01:
CALL AFTER_DEBUG00
.string db "...End handler...", 0x0A
AFTER_DEBUG00:
MOV RDI, STDOUT
POP RSI
MOV RDX, 18
MOV RAX, SYS_WRITE
SYSCALL
RET

_start:
	PUSH RAX
	PUSH RCX
	PUSH RBX
	PUSH RDX
	PUSH RDI
	PUSH RSI

	PUSH RBP
	MOV RBP, RSP
	SUB RSP, 512

	MOV QWORD [RSP], R15
	MOV QWORD [RSP+8], DWORD SA_RESTORER
	MOV QWORD [RSP+16], R14
	
	MOV RAX, SYS_RT_SIGACTION
	MOV RDI, SIGTRAP
	MOV RSI, RSP
	XOR RDX, RDX
	MOV R10, 0X08
	SYSCALL
	
	
	LEAVE
	
	POP RSI
	POP RDI
	POP RDX
	POP RBX
	POP RCX
	POP RAX
	JMP .data+4
	.data db "", -1, -1, -1, -1
	NOP
	NOP
	NOP
	NOP
	NOP
DATA_SYFER:
	
